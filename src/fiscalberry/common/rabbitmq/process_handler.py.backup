import threading
import socket
import time
import logging
    def _run_consumer(self, host, port, user, password, queue_name, message_queue):
        """Loop de conexión/reconexión al servidor RabbitMQ con backoff exponencial."""
        retry_count = 0
        max_retries_before_backoff = 3
        base_delay = 5  # segundos
        max_delay = 300  # 5 minutos máximo
        
        while not self._stop_event.is_set():
            try:
                consumer = RabbitMQConsumer(
                    host=host,
                    port=port,
                    user=user,
                    password=password,
                    queue_name=queue_name,
                    message_queue=message_queue
                )
                consumer.start()
                # Si llegamos aquí, la conexión fue exitosa, resetear contador
                retry_count = 0
                logger.info("Conexión RabbitMQ establecida exitosamente")
                # consumer.start() sólo retorna al desconectarse o error.
            except socket.gaierror as ex:
                retry_count += 1
                logger.error(f"Error de resolución DNS para '{host}': {ex}")
                logger.error("Posibles soluciones:")
                logger.error("1. Verificar que el hostname 'rabbitmq' esté configurado correctamente")
                logger.error("2. Verificar conectividad de red")
                logger.error("3. Verificar que el servidor RabbitMQ esté ejecutándose")
                logger.error("4. Considerar usar una IP directa en lugar del hostname")
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
            except pika.exceptions.AMQPConnectionError as ex:
                retry_count += 1
                logger.error(f"Error de conexión AMQP a {host}:{port}: {ex}")
                logger.error("Verificar que el servidor RabbitMQ esté ejecutándose y accesible")
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
            except pika.exceptions.ProbableAuthenticationError as ex:
                retry_count += 1
                logger.error(f"Error de autenticación con RabbitMQ: {ex}")
                logger.error(f"Verificar credenciales - Usuario: {user}, VHost: {self.config.get('RabbitMq', 'vhost', '/')}")
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
            except pika.exceptions.ProbableAccessDeniedError as ex:
                retry_count += 1
                logger.error(f"Acceso denegado a RabbitMQ: {ex}")
                logger.error(f"Verificar permisos del usuario '{user}' en vhost '{self.config.get('RabbitMq', 'vhost', '/')}'")
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
            except ConnectionError as ex:
                retry_count += 1
                logger.error(f"Error de conexión de red a {host}:{port}: {ex}")
                logger.error("Verificar conectividad de red y que el puerto esté abierto")
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
            except Exception as ex:
                retry_count += 1
                logger.error(f"Error inesperado en RabbitMQConsumer: {ex}", exc_info=True)
                self._handle_retry(retry_count, max_retries_before_backoff, base_delay, max_delay)
                
        logger.info("Salida del bucle de RabbitMQProcessHandler.")
    
    def _handle_retry(self, retry_count, max_retries_before_backoff, base_delay, max_delay):
        """Maneja la lógica de reintento con backoff exponencial."""
        if self._stop_event.is_set():
            return
            
        if retry_count <= max_retries_before_backoff:
            delay = base_delay
            logger.warning(f"Reintento {retry_count}/{max_retries_before_backoff} - esperando {delay}s antes del siguiente intento...")
        else:
            # Backoff exponencial después de los primeros reintentos
            delay = min(base_delay * (2 ** (retry_count - max_retries_before_backoff)), max_delay)
            logger.warning(f"Reintento {retry_count} con backoff exponencial - esperando {delay}s antes del siguiente intento...")
            
        # Esperar con verificación periódica del stop_event
        for _ in range(int(delay)):
            if self._stop_event.is_set():
                break
            time.sleep(1)mon.Configberry import Configberry
from fiscalberry.common.rabbitmq.consumer import RabbitMQConsumer
import pika.exceptions

logger = logging.getLogger(__name__)

class RabbitMQProcessHandler:
    """Administra el hilo de RabbitMQConsumer: arranque, paro y reintentos."""

    _instance = None
    _lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        with cls._lock:
            if not cls._instance:
                cls._instance = super().__new__(cls)
                cls._instance._initialized = False
            return cls._instance

    def __init__(self):
        if self._initialized:
            return
        self._thread = None
        self._stop_event = threading.Event()
        self.config = Configberry()
        self._initialized = True


    def start(self, message_queue):
        """Arranca el consumidor en un hilo daemon (no bloqueante)."""
        if self._thread and self._thread.is_alive():
            logger.warning("RabbitMQ thread ya en ejecución.")
            return

        host = self.config.get("RabbitMq", "host")
        port = self.config.get("RabbitMq", "port")
        user = self.config.get("RabbitMq", "user")
        password = self.config.get("RabbitMq", "password")
        
        # TODO deberia usarse esto: queue_name = self.config.get("RabbitMq", "queue")
        queue_name = self.config.get("SERVIDOR", "uuid")
        self._stop_event.clear()
        self._thread = threading.Thread(
            target=self._run_consumer,
            args=(host, port, user, password, queue_name, message_queue),
            daemon=True
        )
        self._thread.start()
        logger.info("RabbitMQ thread iniciado.")
        #self._thread.join()  # No bloqueante, solo para iniciar el hilo
        #logger.info("RabbitMQ thread en ejecución.")
        
        

    def _run_consumer(self, host, port, user, password, queue_name, message_queue):
        """Loop de conexión/reconexión al servidor RabbitMQ."""
        while not self._stop_event.is_set():
            try:
                consumer = RabbitMQConsumer(
                    host=host,
                    port=port,
                    user=user,
                    password=password,
                    queue_name=queue_name,
                    message_queue=message_queue
                )
                consumer.start()
                # consumer.start() sólo retorna al desconectarse o error.
            except Exception as ex:
                logger.error(f"Error en RabbitMQConsumer: {ex}", exc_info=True)
            if not self._stop_event.is_set():
                logger.warning("RabbitMQConsumer detenido; reintentando en 5 s...")
                time.sleep(5)
        logger.info("Salida del bucle de RabbitMQProcessHandler.")

    def stop(self, timeout: float = 1):
        """Detiene el hilo y espera su finalización."""
        if self._thread and self._thread.is_alive():
            logger.info("Deteniendo RabbitMQConsumer...")
            self._stop_event.set()
            self._thread.join(timeout)
            if self._thread.is_alive():
                logger.warning("RabbitMQConsumer no se detuvo a tiempo.")
            else:
                logger.info("RabbitMQConsumer detenido correctamente.")
        else:
            logger.warning("No hay hilo de RabbitMQConsumer en ejecución.")
        self._thread = None
        self._stop_event.clear()
        logger.info("RabbitMQProcessHandler detenido.")

    def configure_and_restart(self, data: dict, message_queue):
        """
        Recibe el JSON, actualiza Configberry si cambia y reinicia el hilo.
        data debe traer keys 'RabbitMq' y 'Paxaprinter' como en tu interfaz HiDto.
        """
        rabbit_cfg = data.get('RabbitMq', {})
        # valida campos...
        host = rabbit_cfg.get('host'); port = int(rabbit_cfg.get('port', 0))
        user = rabbit_cfg.get('user'); pwd = rabbit_cfg.get('password')
        vhost = rabbit_cfg.get('vhost'); queue = rabbit_cfg.get('queue')
        # compara con lo actual
        curr = {
            "host": self.config.get("RabbitMq", "host"),
            "port": self.config.get("RabbitMq", "port"),
            "user": self.config.get("RabbitMq", "user"),
            "password": self.config.get("RabbitMq", "password"),
            "vhost": self.config.get("RabbitMq", "vhost"),
            "queue": self.config.get("RabbitMq", "queue"),
        }
        new = {"host": host, "port": port, "user": user, "password": pwd, "vhost": vhost, "queue": queue}
        if curr != new:
            self.config.set("RabbitMq", new)
            logger.info("Configuración de RabbitMQ actualizada en disk.")
            
        # compara con lo actual de Paxaprinter
        pax_cfg = data.get('Paxaprinter', {})
        alias = pax_cfg.get('alias')
        tenant = pax_cfg.get('tenant')
        site_name = pax_cfg.get('site_name')
        curr_pax = {
            "alias": self.config.get("Paxaprinter", "alias"),
            "tenant": self.config.get("Paxaprinter", "tenant"),
            "site_name": self.config.get("Paxaprinter", "site_name")
        }
        new_pax = {"alias": alias, "tenant": tenant, "site_name": site_name}
        if curr_pax != new_pax:
            self.config.set("Paxaprinter", new_pax)
            logger.info("Configuración de Paxaprinter actualizada en disk.")

        # guarda en config y reinicia hilo
        if self._thread and self._thread.is_alive():
            self.stop(timeout=5)
        self.start(message_queue)
        
    